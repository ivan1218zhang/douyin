// Code generated by Kitex v0.4.4. DO NOT EDIT.

package messageservice

import (
	"context"
	message "douyin/kitex_gen/message"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageServiceServiceInfo
}

var messageServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageService"
	handlerType := (*message.MessageService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetMassageChat":   kitex.NewMethodInfo(getMassageChatHandler, newMessageServiceGetMassageChatArgs, newMessageServiceGetMassageChatResult, false),
		"MassageAction":    kitex.NewMethodInfo(massageActionHandler, newMessageServiceMassageActionArgs, newMessageServiceMassageActionResult, false),
		"GetLatestMessage": kitex.NewMethodInfo(getLatestMessageHandler, newMessageServiceGetLatestMessageArgs, newMessageServiceGetLatestMessageResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "message",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getMassageChatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceGetMassageChatArgs)
	realResult := result.(*message.MessageServiceGetMassageChatResult)
	success, err := handler.(message.MessageService).GetMassageChat(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceGetMassageChatArgs() interface{} {
	return message.NewMessageServiceGetMassageChatArgs()
}

func newMessageServiceGetMassageChatResult() interface{} {
	return message.NewMessageServiceGetMassageChatResult()
}

func massageActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceMassageActionArgs)
	realResult := result.(*message.MessageServiceMassageActionResult)
	success, err := handler.(message.MessageService).MassageAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceMassageActionArgs() interface{} {
	return message.NewMessageServiceMassageActionArgs()
}

func newMessageServiceMassageActionResult() interface{} {
	return message.NewMessageServiceMassageActionResult()
}

func getLatestMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceGetLatestMessageArgs)
	realResult := result.(*message.MessageServiceGetLatestMessageResult)
	success, err := handler.(message.MessageService).GetLatestMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceGetLatestMessageArgs() interface{} {
	return message.NewMessageServiceGetLatestMessageArgs()
}

func newMessageServiceGetLatestMessageResult() interface{} {
	return message.NewMessageServiceGetLatestMessageResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetMassageChat(ctx context.Context, req *message.MessageChatReq) (r *message.MessageChatResp, err error) {
	var _args message.MessageServiceGetMassageChatArgs
	_args.Req = req
	var _result message.MessageServiceGetMassageChatResult
	if err = p.c.Call(ctx, "GetMassageChat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MassageAction(ctx context.Context, req *message.MassageActionReq) (r *message.MassageActionResp, err error) {
	var _args message.MessageServiceMassageActionArgs
	_args.Req = req
	var _result message.MessageServiceMassageActionResult
	if err = p.c.Call(ctx, "MassageAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLatestMessage(ctx context.Context, req *message.GetLatestMessageReq) (r *message.GetLatestMessageResp, err error) {
	var _args message.MessageServiceGetLatestMessageArgs
	_args.Req = req
	var _result message.MessageServiceGetLatestMessageResult
	if err = p.c.Call(ctx, "GetLatestMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
