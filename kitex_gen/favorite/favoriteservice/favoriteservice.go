// Code generated by Kitex v0.3.2. DO NOT EDIT.

package favoriteservice

import (
	"context"
	"douyin/kitex_gen/favorite"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoriteServiceServiceInfo
}

var favoriteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FavoriteService"
	handlerType := (*favorite.FavoriteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"MIsFavorite":       kitex.NewMethodInfo(mIsFavoriteHandler, newFavoriteServiceMIsFavoriteArgs, newFavoriteServiceMIsFavoriteResult, false),
		"MCountFavorite":    kitex.NewMethodInfo(mCountFavoriteHandler, newFavoriteServiceMCountFavoriteArgs, newFavoriteServiceMCountFavoriteResult, false),
		"FavoriteAction":    kitex.NewMethodInfo(favoriteActionHandler, newFavoriteServiceFavoriteActionArgs, newFavoriteServiceFavoriteActionResult, false),
		"MGetFavoriteVideo": kitex.NewMethodInfo(mGetFavoriteVideoHandler, newFavoriteServiceMGetFavoriteVideoArgs, newFavoriteServiceMGetFavoriteVideoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "favorite",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func mIsFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceMIsFavoriteArgs)
	realResult := result.(*favorite.FavoriteServiceMIsFavoriteResult)
	success, err := handler.(favorite.FavoriteService).MIsFavorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceMIsFavoriteArgs() interface{} {
	return favorite.NewFavoriteServiceMIsFavoriteArgs()
}

func newFavoriteServiceMIsFavoriteResult() interface{} {
	return favorite.NewFavoriteServiceMIsFavoriteResult()
}

func mCountFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceMCountFavoriteArgs)
	realResult := result.(*favorite.FavoriteServiceMCountFavoriteResult)
	success, err := handler.(favorite.FavoriteService).MCountFavorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceMCountFavoriteArgs() interface{} {
	return favorite.NewFavoriteServiceMCountFavoriteArgs()
}

func newFavoriteServiceMCountFavoriteResult() interface{} {
	return favorite.NewFavoriteServiceMCountFavoriteResult()
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceFavoriteActionArgs)
	realResult := result.(*favorite.FavoriteServiceFavoriteActionResult)
	success, err := handler.(favorite.FavoriteService).FavoriteAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFavoriteActionArgs() interface{} {
	return favorite.NewFavoriteServiceFavoriteActionArgs()
}

func newFavoriteServiceFavoriteActionResult() interface{} {
	return favorite.NewFavoriteServiceFavoriteActionResult()
}

func mGetFavoriteVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceMGetFavoriteVideoArgs)
	realResult := result.(*favorite.FavoriteServiceMGetFavoriteVideoResult)
	success, err := handler.(favorite.FavoriteService).MGetFavoriteVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceMGetFavoriteVideoArgs() interface{} {
	return favorite.NewFavoriteServiceMGetFavoriteVideoArgs()
}

func newFavoriteServiceMGetFavoriteVideoResult() interface{} {
	return favorite.NewFavoriteServiceMGetFavoriteVideoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MIsFavorite(ctx context.Context, req *favorite.MIsFavoriteReq) (r *favorite.MIsFavoriteResp, err error) {
	var _args favorite.FavoriteServiceMIsFavoriteArgs
	_args.Req = req
	var _result favorite.FavoriteServiceMIsFavoriteResult
	if err = p.c.Call(ctx, "MIsFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MCountFavorite(ctx context.Context, req *favorite.MCountFavoriteReq) (r *favorite.MCountFavoriteResp, err error) {
	var _args favorite.FavoriteServiceMCountFavoriteArgs
	_args.Req = req
	var _result favorite.FavoriteServiceMCountFavoriteResult
	if err = p.c.Call(ctx, "MCountFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteAction(ctx context.Context, req *favorite.FavoriteActionReq) (r *favorite.FavoriteActionResp, err error) {
	var _args favorite.FavoriteServiceFavoriteActionArgs
	_args.Req = req
	var _result favorite.FavoriteServiceFavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetFavoriteVideo(ctx context.Context, req *favorite.MGetFavoriteVideoReq) (r *favorite.MGetFavoriteVideoResp, err error) {
	var _args favorite.FavoriteServiceMGetFavoriteVideoArgs
	_args.Req = req
	var _result favorite.FavoriteServiceMGetFavoriteVideoResult
	if err = p.c.Call(ctx, "MGetFavoriteVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
