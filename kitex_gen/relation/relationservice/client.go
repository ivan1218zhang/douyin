// Code generated by Kitex v0.3.2. DO NOT EDIT.

package relationservice

import (
	"context"
	"douyin/kitex_gen/relation"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	RelationAction(ctx context.Context, req *relation.RelationActionReq, callOptions ...callopt.Option) (r *relation.RelationActionResp, err error)
	MGetFollow(ctx context.Context, req *relation.MGetFollowReq, callOptions ...callopt.Option) (r *relation.MGetFollowResp, err error)
	MGetFollower(ctx context.Context, req *relation.MGetFollowerReq, callOptions ...callopt.Option) (r *relation.MGetFollowerResp, err error)
	MGetFriend(ctx context.Context, req *relation.MGetFriendReq, callOptions ...callopt.Option) (r *relation.MGetFriendResp, err error)
	GetRelation(ctx context.Context, req *relation.GetRelationReq, callOptions ...callopt.Option) (r *relation.GetRelationResp, err error)
	MGetRelation(ctx context.Context, req *relation.MGetRelationReq, callOptions ...callopt.Option) (r *relation.MGetRelationResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kRelationServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kRelationServiceClient struct {
	*kClient
}

func (p *kRelationServiceClient) RelationAction(ctx context.Context, req *relation.RelationActionReq, callOptions ...callopt.Option) (r *relation.RelationActionResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RelationAction(ctx, req)
}

func (p *kRelationServiceClient) MGetFollow(ctx context.Context, req *relation.MGetFollowReq, callOptions ...callopt.Option) (r *relation.MGetFollowResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MGetFollow(ctx, req)
}

func (p *kRelationServiceClient) MGetFollower(ctx context.Context, req *relation.MGetFollowerReq, callOptions ...callopt.Option) (r *relation.MGetFollowerResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MGetFollower(ctx, req)
}

func (p *kRelationServiceClient) MGetFriend(ctx context.Context, req *relation.MGetFriendReq, callOptions ...callopt.Option) (r *relation.MGetFriendResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MGetFriend(ctx, req)
}

func (p *kRelationServiceClient) GetRelation(ctx context.Context, req *relation.GetRelationReq, callOptions ...callopt.Option) (r *relation.GetRelationResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRelation(ctx, req)
}

func (p *kRelationServiceClient) MGetRelation(ctx context.Context, req *relation.MGetRelationReq, callOptions ...callopt.Option) (r *relation.MGetRelationResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MGetRelation(ctx, req)
}
