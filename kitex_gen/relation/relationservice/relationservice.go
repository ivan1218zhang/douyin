// Code generated by Kitex v0.3.2. DO NOT EDIT.

package relationservice

import (
	"context"
	"douyin/kitex_gen/relation"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relation.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RelationAction": kitex.NewMethodInfo(relationActionHandler, newRelationServiceRelationActionArgs, newRelationServiceRelationActionResult, false),
		"MGetFollow":     kitex.NewMethodInfo(mGetFollowHandler, newRelationServiceMGetFollowArgs, newRelationServiceMGetFollowResult, false),
		"MGetFollower":   kitex.NewMethodInfo(mGetFollowerHandler, newRelationServiceMGetFollowerArgs, newRelationServiceMGetFollowerResult, false),
		"MGetFriend":     kitex.NewMethodInfo(mGetFriendHandler, newRelationServiceMGetFriendArgs, newRelationServiceMGetFriendResult, false),
		"GetRelation":    kitex.NewMethodInfo(getRelationHandler, newRelationServiceGetRelationArgs, newRelationServiceGetRelationResult, false),
		"MGetRelation":   kitex.NewMethodInfo(mGetRelationHandler, newRelationServiceMGetRelationArgs, newRelationServiceMGetRelationResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceRelationActionArgs)
	realResult := result.(*relation.RelationServiceRelationActionResult)
	success, err := handler.(relation.RelationService).RelationAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationActionArgs() interface{} {
	return relation.NewRelationServiceRelationActionArgs()
}

func newRelationServiceRelationActionResult() interface{} {
	return relation.NewRelationServiceRelationActionResult()
}

func mGetFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceMGetFollowArgs)
	realResult := result.(*relation.RelationServiceMGetFollowResult)
	success, err := handler.(relation.RelationService).MGetFollow(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceMGetFollowArgs() interface{} {
	return relation.NewRelationServiceMGetFollowArgs()
}

func newRelationServiceMGetFollowResult() interface{} {
	return relation.NewRelationServiceMGetFollowResult()
}

func mGetFollowerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceMGetFollowerArgs)
	realResult := result.(*relation.RelationServiceMGetFollowerResult)
	success, err := handler.(relation.RelationService).MGetFollower(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceMGetFollowerArgs() interface{} {
	return relation.NewRelationServiceMGetFollowerArgs()
}

func newRelationServiceMGetFollowerResult() interface{} {
	return relation.NewRelationServiceMGetFollowerResult()
}

func mGetFriendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceMGetFriendArgs)
	realResult := result.(*relation.RelationServiceMGetFriendResult)
	success, err := handler.(relation.RelationService).MGetFriend(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceMGetFriendArgs() interface{} {
	return relation.NewRelationServiceMGetFriendArgs()
}

func newRelationServiceMGetFriendResult() interface{} {
	return relation.NewRelationServiceMGetFriendResult()
}

func getRelationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceGetRelationArgs)
	realResult := result.(*relation.RelationServiceGetRelationResult)
	success, err := handler.(relation.RelationService).GetRelation(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceGetRelationArgs() interface{} {
	return relation.NewRelationServiceGetRelationArgs()
}

func newRelationServiceGetRelationResult() interface{} {
	return relation.NewRelationServiceGetRelationResult()
}

func mGetRelationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceMGetRelationArgs)
	realResult := result.(*relation.RelationServiceMGetRelationResult)
	success, err := handler.(relation.RelationService).MGetRelation(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceMGetRelationArgs() interface{} {
	return relation.NewRelationServiceMGetRelationArgs()
}

func newRelationServiceMGetRelationResult() interface{} {
	return relation.NewRelationServiceMGetRelationResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationAction(ctx context.Context, req *relation.RelationActionReq) (r *relation.RelationActionResp, err error) {
	var _args relation.RelationServiceRelationActionArgs
	_args.Req = req
	var _result relation.RelationServiceRelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetFollow(ctx context.Context, req *relation.MGetFollowReq) (r *relation.MGetFollowResp, err error) {
	var _args relation.RelationServiceMGetFollowArgs
	_args.Req = req
	var _result relation.RelationServiceMGetFollowResult
	if err = p.c.Call(ctx, "MGetFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetFollower(ctx context.Context, req *relation.MGetFollowerReq) (r *relation.MGetFollowerResp, err error) {
	var _args relation.RelationServiceMGetFollowerArgs
	_args.Req = req
	var _result relation.RelationServiceMGetFollowerResult
	if err = p.c.Call(ctx, "MGetFollower", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetFriend(ctx context.Context, req *relation.MGetFriendReq) (r *relation.MGetFriendResp, err error) {
	var _args relation.RelationServiceMGetFriendArgs
	_args.Req = req
	var _result relation.RelationServiceMGetFriendResult
	if err = p.c.Call(ctx, "MGetFriend", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRelation(ctx context.Context, req *relation.GetRelationReq) (r *relation.GetRelationResp, err error) {
	var _args relation.RelationServiceGetRelationArgs
	_args.Req = req
	var _result relation.RelationServiceGetRelationResult
	if err = p.c.Call(ctx, "GetRelation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetRelation(ctx context.Context, req *relation.MGetRelationReq) (r *relation.MGetRelationResp, err error) {
	var _args relation.RelationServiceMGetRelationArgs
	_args.Req = req
	var _result relation.RelationServiceMGetRelationResult
	if err = p.c.Call(ctx, "MGetRelation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
