// Code generated by Kitex v0.3.2. DO NOT EDIT.

package videoservice

import (
	"context"
	"douyin/kitex_gen/video"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"MGetVideo":     kitex.NewMethodInfo(mGetVideoHandler, newVideoServiceMGetVideoArgs, newVideoServiceMGetVideoResult, false),
		"Publish":       kitex.NewMethodInfo(publishHandler, newVideoServicePublishArgs, newVideoServicePublishResult, false),
		"MGetPublish":   kitex.NewMethodInfo(mGetPublishHandler, newVideoServiceMGetPublishArgs, newVideoServiceMGetPublishResult, false),
		"MGetVideoById": kitex.NewMethodInfo(mGetVideoByIdHandler, newVideoServiceMGetVideoByIdArgs, newVideoServiceMGetVideoByIdResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func mGetVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceMGetVideoArgs)
	realResult := result.(*video.VideoServiceMGetVideoResult)
	success, err := handler.(video.VideoService).MGetVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceMGetVideoArgs() interface{} {
	return video.NewVideoServiceMGetVideoArgs()
}

func newVideoServiceMGetVideoResult() interface{} {
	return video.NewVideoServiceMGetVideoResult()
}

func publishHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePublishArgs)
	realResult := result.(*video.VideoServicePublishResult)
	success, err := handler.(video.VideoService).Publish(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishArgs() interface{} {
	return video.NewVideoServicePublishArgs()
}

func newVideoServicePublishResult() interface{} {
	return video.NewVideoServicePublishResult()
}

func mGetPublishHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceMGetPublishArgs)
	realResult := result.(*video.VideoServiceMGetPublishResult)
	success, err := handler.(video.VideoService).MGetPublish(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceMGetPublishArgs() interface{} {
	return video.NewVideoServiceMGetPublishArgs()
}

func newVideoServiceMGetPublishResult() interface{} {
	return video.NewVideoServiceMGetPublishResult()
}

func mGetVideoByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceMGetVideoByIdArgs)
	realResult := result.(*video.VideoServiceMGetVideoByIdResult)
	success, err := handler.(video.VideoService).MGetVideoById(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceMGetVideoByIdArgs() interface{} {
	return video.NewVideoServiceMGetVideoByIdArgs()
}

func newVideoServiceMGetVideoByIdResult() interface{} {
	return video.NewVideoServiceMGetVideoByIdResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MGetVideo(ctx context.Context, req *video.MGetVideoReq) (r *video.MGetVideoResp, err error) {
	var _args video.VideoServiceMGetVideoArgs
	_args.Req = req
	var _result video.VideoServiceMGetVideoResult
	if err = p.c.Call(ctx, "MGetVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Publish(ctx context.Context, req *video.PublishReq) (r *video.PublishResp, err error) {
	var _args video.VideoServicePublishArgs
	_args.Req = req
	var _result video.VideoServicePublishResult
	if err = p.c.Call(ctx, "Publish", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetPublish(ctx context.Context, req *video.MGetPublishReq) (r *video.MGetPublishResp, err error) {
	var _args video.VideoServiceMGetPublishArgs
	_args.Req = req
	var _result video.VideoServiceMGetPublishResult
	if err = p.c.Call(ctx, "MGetPublish", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetVideoById(ctx context.Context, req *video.MGetVideoByIdReq) (r *video.MGetVideoByIdResp, err error) {
	var _args video.VideoServiceMGetVideoByIdArgs
	_args.Req = req
	var _result video.VideoServiceMGetVideoByIdResult
	if err = p.c.Call(ctx, "MGetVideoById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
