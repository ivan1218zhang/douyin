// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	"douyin/kitex_gen/video/video"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetVideo": kitex.NewMethodInfo(getVideoHandler, newGetVideoArgs, newGetVideoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.DouyinFeedRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).GetVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideoArgs:
		success, err := handler.(video.VideoService).GetVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideoResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideoArgs() interface{} {
	return &GetVideoArgs{}
}

func newGetVideoResult() interface{} {
	return &GetVideoResult{}
}

type GetVideoArgs struct {
	Req *video.DouyinFeedRequest
}

func (p *GetVideoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.DouyinFeedRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetVideoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetVideoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideoArgs) Unmarshal(in []byte) error {
	msg := new(video.DouyinFeedRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideoArgs_Req_DEFAULT *video.DouyinFeedRequest

func (p *GetVideoArgs) GetReq() *video.DouyinFeedRequest {
	if !p.IsSetReq() {
		return GetVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetVideoResult struct {
	Success *video.DouyinFeedResponse
}

var GetVideoResult_Success_DEFAULT *video.DouyinFeedResponse

func (p *GetVideoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.DouyinFeedResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetVideoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetVideoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideoResult) Unmarshal(in []byte) error {
	msg := new(video.DouyinFeedResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideoResult) GetSuccess() *video.DouyinFeedResponse {
	if !p.IsSetSuccess() {
		return GetVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.DouyinFeedResponse)
}

func (p *GetVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetVideo(ctx context.Context, Req *video.DouyinFeedRequest) (r *video.DouyinFeedResponse, err error) {
	var _args GetVideoArgs
	_args.Req = Req
	var _result GetVideoResult
	if err = p.c.Call(ctx, "GetVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
