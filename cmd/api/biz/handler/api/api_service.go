// Code generated by hertz generator.

package api

import (
	"context"
	"douyin/cmd/api/biz/mw"
	"douyin/cmd/api/biz/rpc"
	"douyin/kitex_gen/comment"
	"douyin/kitex_gen/favorite"
	"douyin/kitex_gen/message"
	"douyin/kitex_gen/relation"
	"douyin/kitex_gen/user"
	"douyin/kitex_gen/video"
	"io/ioutil"

	api "douyin/cmd/api/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// MGetVideo .
// @router /douyin/feed/ [GET]
func MGetVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.MGetVideoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	id, err := mw.JwtGetUserId(req.Token)
	if err != nil {
		id = -1
		err = nil
	}
	resp, err := rpc.MGetVideo(ctx, &video.MGetVideoReq{
		LatestTime: req.LatestTime,
		UserId:     id,
	})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	c.JSON(consts.StatusOK, resp)
}

// Register .
// @router /douyin/user/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := rpc.CreateUser(ctx, &user.CreateUserReq{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	token, err := mw.JwtGetToken(resp.UserID)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	resp.Token = token
	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router /douyin/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := rpc.CheckUser(ctx, &user.CheckUserReq{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	token, err := mw.JwtGetToken(resp.UserID)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	resp.Token = token
	c.JSON(consts.StatusOK, resp)
}

// GetUser .
// @router /douyin/user/ [GET]
func GetUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	id, err := mw.JwtGetUserId(req.Token)
	if err != nil {
		id = -1
		err = nil
	}
	resp, err := rpc.GetUser(ctx, &user.GetUserReq{Id: id, UserId: req.UserID})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	c.JSON(consts.StatusOK, resp)
}

// Publish .
// @router /douyin/publish/action/ [POST]
func Publish(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PublishReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	id, err := mw.JwtGetUserId(req.Token)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	file, err := c.FormFile("data")
	source, err := file.Open()
	defer source.Close()
	data, err := ioutil.ReadAll(source)
	resp, err := rpc.Publish(ctx, &video.PublishReq{
		UserId: id,
		Title:  req.Title,
		Data:   data,
	})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	c.JSON(consts.StatusOK, resp)
}

// MGetPublish .
// @router /douyin/publish/list/ [GET]
func MGetPublish(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.MGetPublishReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	id, err := mw.JwtGetUserId(req.Token)
	if err != nil {
		id = -1
		err = nil
	}
	resp, err := rpc.MGetPublish(ctx, &video.MGetPublishReq{UserId: req.UserID, Id: id})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	c.JSON(consts.StatusOK, resp)
}

// FavoriteAction .
// @router /douyin/favorite/action/ [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.FavoriteActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	id, err := mw.JwtGetUserId(req.Token)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	resp, err := rpc.FavoriteAction(ctx, &favorite.FavoriteActionReq{
		UserId:     id,
		VideoId:    req.VideoID,
		ActionType: req.ActionType,
	})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	c.JSON(consts.StatusOK, resp)
}

// MGetFavorite .
// @router /douyin/favorite/list/ [GET]
func MGetFavorite(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.MGetFavoriteReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	id, err := mw.JwtGetUserId(req.Token)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	resp, err := rpc.MGetFavorite(ctx, &favorite.MGetFavoriteVideoReq{UserId: id})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	c.JSON(consts.StatusOK, resp)
}

// CommentAction .
// @router /douyin/comment/action/ [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CommentActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	id, err := mw.JwtGetUserId(req.Token)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	resp, err := rpc.CommentAction(ctx, &comment.CommentActionReq{
		UserId:      id,
		VideoId:     req.VideoID,
		ActionType:  req.ActionType,
		CommentText: req.CommentText,
		CommentId:   req.CommentID,
	})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	c.JSON(consts.StatusOK, resp)
}

// MGetComment .
// @router /douyin/comment/list/ [GET]
func MGetComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.MGetCommentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	id, err := mw.JwtGetUserId(req.Token)
	if err != nil {
		id = -1
		err = nil
	}
	resp, err := rpc.MGetComment(ctx, &comment.MGetCommentReq{VideoId: req.VideoID, UserId: id})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	c.JSON(consts.StatusOK, resp)
}

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	id, err := mw.JwtGetUserId(req.Token)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	resp, err := rpc.RelationAction(ctx, &relation.RelationActionReq{
		UserId:     id,
		ToUserId:   req.ToUserID,
		ActionType: req.ActionType,
	})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	c.JSON(consts.StatusOK, resp)
}

// MGetFollow .
// @router /douyin/relation/follow/list/ [GET]
func MGetFollow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.MGetFollowReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	id, err := mw.JwtGetUserId(req.Token)

	if err != nil {
		id = -1
		err = nil
	}
	resp, err := rpc.MGetFollow(ctx, &relation.MGetFollowReq{UserId: req.UserID, Id: id})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	c.JSON(consts.StatusOK, resp)
}

// MGetFollower .
// @router /douyin/relation/follower/list/ [GET]
func MGetFollower(ctx context.Context, c *app.RequestContext) {
	var err error

	var req api.MGetFollowerReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	id, err := mw.JwtGetUserId(req.Token)
	if err != nil {
		id = -1
		err = nil
	}
	resp, err := rpc.MGetFollower(ctx, &relation.MGetFollowerReq{UserId: req.UserID, Id: id})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	c.JSON(consts.StatusOK, resp)
}

// MGetFriend .
// @router /douyin/relation/friend/list/ [GET]
func MGetFriend(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.MGetFriendReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	_, err = mw.JwtGetUserId(req.Token)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	resp, err := rpc.MGetFriend(ctx, &relation.MGetFriendReq{UserId: req.UserID})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}

	c.JSON(consts.StatusOK, resp)
}

// MessageAction .
// @router /douyin/message/action/ [POST]
func MessageAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.MessageActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	id, err := mw.JwtGetUserId(req.Token)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	resp, err := rpc.MessageAction(ctx, &message.MessageActionReq{
		UserId:     id,
		ToUserId:   req.ToUserID,
		ActionType: req.ActionType,
		Content:    req.Content,
	})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	c.JSON(consts.StatusOK, resp)
}

// MGetChatMessage .
// @router /douyin/message/chat/ [GET]
func MGetChatMessage(ctx context.Context, c *app.RequestContext) {
	var err error

	var req api.MGetChatMessageReq

	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	id, err := mw.JwtGetUserId(req.Token)

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}

	resp, err := rpc.MGetChatMessage(ctx, &message.MessageChatReq{
		UserId:     id,
		FromUserId: req.ToUserID,
	})

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}

	c.JSON(consts.StatusOK, resp)
}
